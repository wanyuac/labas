"""
This module tabulate the cluster file in the outputs of cd-hit-est and assigns a cluster ID to each sequence.
Code is derived from script tabulate_cdhit.py in https://github.com/wanyuac/PAMmaker.

This module takes as input a clstr file generated by CD-HIT, which must show complete sequence names.
    >Cluster 34
    0    1536nt, >32__QepA_Flq__QepA__299... *
    1    1536nt, >32__QepA_Flq__QepA2__300... at 1:1536:1:1536/+/99.87%

Output:
    cluster    index    seqid    length    identity    representative
    34    0    32__QepA_Flq__QepA__299    1536nt    100.00    Y
    34    1    32__QepA_Flq__QepA2__300    1536nt    100.00    N
    
    The representative sequence must show 100% identity to itself.
    Note that an index of zero does not necessarily mean this sequence is a representative sequence or the longest sequence.

Copyright (C) 2023-2024 Yu Wan <wanyuac@126.com>
Licensed under the GNU General Public Licence version 3 (GPLv3) <https://www.gnu.org/licenses/>.
Creation: 27 Dec 2023; the latest update: 27 Dec 2023.
"""

class CDHITEST_cluster_file:
    def __init__(self, cluster_file):
        with open(cluster_file, 'r') as f:
            self.__content = f.read().splitlines()

    def tabulate(self, tsv_file):
        f = open(tsv_file, 'w')
        print("\t".join(["cluster", "index", "seqid", "length", "identity", "representative"]), file = f)  # Header
        for line in self.__content:
            if line.startswith(">"):  # the line denoting the start of a new cluster
                cluster_id = line.split(" ")[1]  # reads a new cluster ID: "0", "1", "2", ...
            else:  # cluster content
                domains = line.split("\t")
                index = domains[0]
                fields = domains[1].split(" ")  # parse information such as "1536nt, >32__QepA_Flq__QepA__299... *"
                seqlen = fields[0][0 : -3]  # removes "nt," or "aa,"
                seqid = fields[1][1 : -3]  # removes ">" and "..." from the string
                if fields[-1] == "*":  # a representative sequence is found
                    identity = "100.00"
                    representative = "Y"  # yes
                else:  # Non-representative sequences
                    if args.e:  # cd-hit-est: 'at 1:1569:1:1569/+/100.00%'; cd-hit: 'at 100.00%'.
                        identity = fields[-1].split("/")[-1]  # remove stuff like "at 1:1569:1:1569/+/"
                    else:
                        identity = fields[-1].split(" ")[-1]  # remove 'at '
                    identity = fields[-1][0 : -1]  # drop the % sign
                    representative = "N"  # no

                print("\t".join([cluster_id, index, seqid, seqlen, identity, representative]), file = f)
        f.close()
        return
